name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      # - name: Run DB container
      #   run: |
      #     docker network create mynetwork
      #     docker run --network mynetwork --name db -p 5432:5432 \
      #     --env POSTGRES_USER=${{ secrets.USER }} \
      #     --env POSTGRES_PASSWORD=${{ secrets.PASSWORD }} \
      #     --env POSTGRES_DB=${{ secrets.DATABASE }} \
      #     -v ${{ github.workspace }}/fast_api_app/populate_db.sql:/docker-entrypoint-initdb.d/populate_db.sql \
      #     -d postgres:latest

      # - name: Verify database population
      #   env:
      #     POSTGRES_USER: ${{ secrets.USER }}
      #     POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
      #     POSTGRES_DB: ${{ secrets.DATABASE }}
      #   run: |
      #     # Wait for the database to be fully ready
      #     echo "Waiting for PostgreSQL to start"
      #     until docker exec db pg_isready; do
      #       sleep 1;
      #     done
      #     echo "PostgreSQL started"

      #     # Check if the database is populated
      #     QUERY="SELECT COUNT(*) FROM books;"
      #     RESULT=$(docker exec -e PGPASSWORD=$POSTGRES_PASSWORD db psql -U $POSTGRES_USER -d $POSTGRES_DB -t -c "$QUERY")
      #     echo "Number of rows in books: $RESULT"
      #     if [[ $RESULT -eq 0 ]]; then
      #       echo "Database is not populated"
      #       exit 1
      #     else
      #       echo "Database is populated"
      #     fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pipeline_requirements.txt

      # Set environment variables from GitHub secrets
      - name: Set up environment variables
        run: |
          echo "host=localhost" >> $GITHUB_ENV
          echo "database=${{ secrets.DATABASE }}" >> $GITHUB_ENV
          echo "user=${{ secrets.USER }}" >> $GITHUB_ENV
          echo "password=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "port=${{ secrets.PORT }}" >> $GITHUB_ENV

      # - name: Run tests
      #   run: python -m pytest tests/ -vv

      # - name: Code quality check
      #   run: |
      #     python -m flake8 --max-line-length=120
      #     python -m black . --check

      # - name: Run OWASP Dependency Check
      #   run: |
      #     # Download and unzip Dependency-Check
      #     wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
      #     unzip dependency-check-9.0.9-release.zip

      #     # Run Dependency-Check
      #     ./dependency-check/bin/dependency-check.sh --project "Fastapi-project" --scan "./fast_api_app" --nvdApiKey "${{ secrets.NVD_API_KEY }}" --format "XML" --out "./reports"

      # - name: Upload Dependency Check Report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: dependency-check-report
      #     path: ./reports/dependency-check-report.xml

      # - name: SonarCloud Scan
      #   uses: sonarsource/sonarcloud-github-action@master
      #   with:
      #     args: >
      #       -Dsonar.projectKey=Jaro233_fastapi-cicd-pipeline-k8s
      #       -Dsonar.organization=jaro233
      #       -Dsonar.dependencyCheck.reportPath=./reports/dependency-check-report.xml
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build artifact
        run: poetry build

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: j4ro123/fastapi-app:0.${{ github.run_number }}
          secrets: |
            "host=${{ secrets.HOST }}"
            "database=${{ secrets.DATABASE }}"
            "user=${{ secrets.USER }}"
            "password=${{ secrets.PASSWORD }}"
            "port=${{ secrets.PORT }}"

      # - name: Scan the Docker image with Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: j4ro123/fastapi-app:0.${{ github.run_number }}
      #     format: "table"
      #     exit-code: "1"
      #     ignore-unfixed: true
      #     vuln-type: "os,library"
      #     severity: "CRITICAL,HIGH"

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push j4ro123/fastapi-app:0.${{ github.run_number }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          role-session-name: samplerolesession
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Set up Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{secrets.CLUSTER_NAME}}

      - name: Upgrade Application with Helm
        run: |
          helm upgrade helm-fastapi ./helm-fastapi \
            --reuse-values \
            --set image.tag=0.${{ github.run_number }} \

      - name: Removing previous chrome instances on runner
        run: sudo apt purge google-chrome-stable

      - name: Run Selenium tests
        run: python selenium/selenium_test.py
