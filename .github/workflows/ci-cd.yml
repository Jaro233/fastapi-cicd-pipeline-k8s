name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Run DB container
        run: |
          docker network create mynetwork
          docker run --network mynetwork --name db -p 5432:5432 \
          --env POSTGRES_USER=${{ secrets.USER }} \
          --env POSTGRES_PASSWORD=${{ secrets.PASSWORD }} \
          --env POSTGRES_DB=${{ secrets.DATABASE }} \
          -v ${{ github.workspace }}/fast_api_app/populate_db.sql:/docker-entrypoint-initdb.d/populate_db.sql \
          -d postgres:latest

      - name: Verify database population
        env:
          POSTGRES_USER: ${{ secrets.USER }}
          POSTGRES_PASSWORD: ${{ secrets.PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE }}
        run: |
          # Wait for the database to be fully ready
          echo "Waiting for PostgreSQL to start"
          until docker exec db pg_isready; do
            sleep 1;
          done
          echo "PostgreSQL started"

          # Check if the database is populated
          QUERY="SELECT COUNT(*) FROM books;"
          RESULT=$(docker exec -e PGPASSWORD=$POSTGRES_PASSWORD db psql -U $POSTGRES_USER -d $POSTGRES_DB -t -c "$QUERY")
          echo "Number of rows in books: $RESULT"
          if [[ $RESULT -eq 0 ]]; then
            echo "Database is not populated"
            exit 1
          else
            echo "Database is populated"
          fi

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pipeline_requirements.txt

      # Set environment variables from GitHub secrets
      - name: Set up environment variables
        run: |
          echo "host=localhost" >> $GITHUB_ENV
          echo "database=${{ secrets.DATABASE }}" >> $GITHUB_ENV
          echo "user=${{ secrets.USER }}" >> $GITHUB_ENV
          echo "password=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "port=${{ secrets.PORT }}" >> $GITHUB_ENV

      - name: Run tests
        run: python -m pytest tests/ -vv

      - name: Code quality check
        run: |
          python -m flake8 --max-line-length=120
          python -m black . --check

      - name: Run OWASP Dependency Check
        run: |
          # Download and unzip Dependency-Check
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
          unzip dependency-check-9.0.9-release.zip

          # Run Dependency-Check
          ./dependency-check/bin/dependency-check.sh --project "Fastapi-project" --scan "./fast_api_app"

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Build artifact
        run: poetry build

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: j4ro123/fastapi-app:latest
          secrets: |
            "host=${{ secrets.HOST }}"
            "database=${{ secrets.DATABASE }}"
            "user=${{ secrets.USER }}"
            "password=${{ secrets.PASSWORD }}"
            "port=${{ secrets.PORT }}"

      - name: Scan the Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "j4ro123/fastapi-app:latest"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: docker push j4ro123/fastapi-app:latest

      - name: Removing previous chrome instances on runner
        run: sudo apt purge google-chrome-stable

      - name: Run Selenium tests
        run: python selenium/selenium_test.py
